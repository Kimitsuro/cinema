{% extends 'base.html.twig' %}

{% block title %}Оплата - кинотеатр Сакура{% endblock %}

{% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('css/ticket-purchase.css') }}?v={{ "now"|date("U") }}">
{% endblock %}

{% block body %}
    <!-- Progress Steps -->
    <div class="progress-container">
        <div class="progress-steps">
            <div class="step active" data-step="1">
                <div class="step-number">1</div>
                <div class="step-label">Выбор сеанса</div>
            </div>
            <div class="step-connector"></div>
            <div class="step" data-step="2">
                <div class="step-number">2</div>
                <div class="step-label">Выберите места</div>
            </div>
            <div class="step-connector"></div>
            <div class="step" data-step="3">
                <div class="step-number">3</div>
                <div class="step-label">Оплата</div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Step 1: Session Selection -->
        <div class="step-content active" data-step="1">
            <div class="content-section">
                <h2 class="section-title">Выберите сеанс</h2>
                <div class="sessions-grid">
                    {% for date, sessions in groupedSessions %}
                        <div class="session-date">
                            {{ date|date('d.m.Y') }} - {{ date|date('l')|trans({}, 'messages', 'ru') }}
                        </div>
                        {% for session in sessions %}
                            <div class="session-times">
                                <div class="session-option" 
                                    data-session-id="{{ session.id }}" 
                                    data-time="{{ session.sessionData|date('H:i') }}" 
                                    data-date="{{ session.sessionData|date('d.m.Y') }}" 
                                    data-hall="{{ session.hall.id }}" 
                                    data-price="{{ session.sessionPrice }}"
                                    data-format="{{ session.movie.movieFormat }}">
                                    <div class="session-time">{{ session.sessionData|date('H:i') }}</div>
                                    <div class="session-info">Зал {{ session.hall.id }} - {{ session.movie.movieFormat }}</div>
                                    <div class="session-price">от {{ session.sessionPrice }} ₽</div>
                                </div>
                            </div>
                        {% endfor %}
                    {% endfor %}
                </div>
                
                <div class="btn-group">
                    <button class="btn btn-primary" id="nextToSeats" disabled>Выбрать места →</button>
                </div>
            </div>
        </div>

        <!-- Step 2: Seat Selection -->
        <div class="step-content" data-step="2">
            <div class="content-section">
                <h2 class="section-title">Выберите места</h2>
                
                <div class="seat-legend">
                    <div class="legend-item">
                        <div class="legend-seat economy" style="background: var(--seat-economy); border-color: var(--seat-economy);"></div>
                        <span id="economyPrice">Эконом (0₽)</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-seat regular" style="background: var(--seat-regular); border-color: var(--seat-regular);"></div>
                        <span id="regularPrice">Обычные (0₽)</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-seat" style="background: var(--seat-selected); border-color: var(--seat-selected);"></div>
                        <span>Выбранные</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-seat" style="background: var(--seat-occupied); border-color: var(--seat-occupied);"></div>
                        <span>Занятые</span>
                    </div>
                </div>

                <div class="seat-selection-container">
                    <div class="hall-container">
                        <div class="screen">
                            <div class="screen-text">ЭКРАН</div>
                        </div>

                        <div class="seats-container">
                            <div class="seats-grid" id="seatsGrid">
                                <!-- Seats will be generated by JavaScript -->
                            </div>
                        </div>
                    </div>

                    <div class="selection-summary">
                        <div class="summary-title">Ваш заказ</div>
                        
                        <div id="sessionInfo" class="session-details">
                            <div><strong>Сеанс:</strong> <span id="selectedSessionInfo">Не выбран</span></div>
                        </div>

                        <div class="selected-seats" id="selectedSeatsContainer">
                            <div class="summary-title">Выбранные места:</div>
                            <div id="selectedSeatsList">Места не выбраны</div>
                        </div>

                        <div class="total-section">
                            <div class="total-price">
                                <span>Итого:</span>
                                <span id="totalPrice">0 ₽</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="btn-group">
                    <button class="btn btn-secondary" id="backToSessions">← Назад</button>
                    <button class="btn btn-primary" id="nextToPayment" disabled>К оплате →</button>
                </div>
            </div>
        </div>

        <!-- Step 3: Payment -->
        <div class="step-content" data-step="3">
            <div class="content-section">
                <h2 class="section-title">Подтверждение заказа</h2>
                
                <div class="purchase-summary">
                    <div class="movie-info">
                        <img src="{{ movie.moviePoster }}" alt="Постер фильма" class="movie-poster-small">
                        <div class="movie-details">
                            <div class="movie-title">{{ movie.movieTitle }}</div>
                            <div class="movie-meta">{{ movie.movieGenre }} • {{ movie.movieDuration }} мин • {{ movie.movieAge }}+</div>
                        </div>
                    </div>

                    <div class="session-details" id="finalSessionInfo">
                        <!-- Session info will be filled by JavaScript -->
                    </div>

                    <div class="tickets-list" id="finalTicketsList">
                        <!-- Tickets will be filled by JavaScript -->
                    </div>

                    <div class="total-section">
                        <div class="total-price">
                            <span>Итого к оплате:</span>
                            <span id="finalTotalPrice">0 ₽</span>
                        </div>
                    </div>
                </div>

                <div class="btn-group">
                    <button class="btn btn-secondary" id="backToSeats">← Назад</button>
                    <button class="btn btn-primary" id="confirmPurchase">Оплатить</button>
                </div>
            </div>
        </div>

        <!-- Success Message -->
        <div class="step-content" data-step="4">
            <div class="success-message">
                <div class="success-icon">✅</div>
                <div class="success-title">Билеты успешно куплены!</div>
                <div class="success-text">
                    Ваши билеты отправлены на электронную почту.<br>
                    Приходите за 15 минут до начала сеанса.
                </div>
                <div class="btn-group">
                    <a href="{{ path('goer_account') }}" class="btn btn-primary">Личный кабинет</a>
                    <a href="{{ path('app_home') }}" class="btn btn-secondary">На главную</a>
                </div>
            </div>
        </div>
    </main>
{% endblock %}

{% block javascripts %}
    <script>
        // Application state
        let currentStep = 1;
        let selectedSession = null;
        let selectedSeats = [];
        let seatPrices = { economy: 0, regular: 0 };
        let isUserAuthenticated = {{ app.user ? 'true' : 'false' }};
        let userRole = {{ app.user and app.user.roles ? app.user.roles|json_encode|raw : '[]' }};

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Initializing event listeners...');
            console.log('User authenticated:', isUserAuthenticated);
            console.log('User roles:', userRole);
            initializeEventListeners();
            initializeFromUrl();
        });

        function initializeFromUrl() {
            console.log('Checking URL parameters...');
            const urlParams = new URLSearchParams(window.location.search);
            const step = urlParams.get('step');
            const sessionId = urlParams.get('sessionId');

            if (step === '2' && sessionId) {
                console.log('Direct to step 2 with sessionId:', sessionId);
                fetchSessionData(sessionId).then(() => {
                    if (selectedSession) {
                        updateLegendPrices();
                        fetchSeats().then(() => goToStep(2));
                    }
                });
            }
        }

        async function fetchSessionData(sessionId) {
            console.log('Fetching session data for ID:', sessionId);
            try {
                const response = await fetch(`/ticket-purchase/session/${sessionId}`);
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || 'Ошибка загрузки данных сеанса');
                }

                selectedSession = {
                    id: data.id,
                    time: data.time,
                    date: data.date,
                    hall: data.hall,
                    price: data.price,
                    format: data.format
                };
                seatPrices = {
                    economy: Math.floor(data.price * 0.8),
                    regular: Math.floor(data.price)
                };
                console.log('Session data loaded:', selectedSession);
                updateSessionInfo();
            } catch (error) {
                console.error('Error fetching session data:', error.message);
                alert('Ошибка при загрузке данных сеанса: ' + error.message);
            }
        }

        function initializeEventListeners() {
            console.log('Setting up session option listeners...');
            const sessionOptions = document.querySelectorAll('.session-option');
            console.log('Found session options:', sessionOptions.length);
            sessionOptions.forEach((option, index) => {
                console.log(`Attaching listener to session option ${index + 1}:`, option.dataset.sessionId);
                option.removeEventListener('click', handleSessionClick);
                option.addEventListener('click', handleSessionClick);
            });

            // Navigation buttons
            document.getElementById('nextToSeats').addEventListener('click', () => {
                console.log('Next to seats clicked, fetching seats...');
                fetchSeats().then(() => goToStep(2));
            });
            document.getElementById('backToSessions').addEventListener('click', () => {
                console.log('Back to sessions clicked');
                selectedSeats = [];
                updateSelectedSeats();
                goToStep(1);
            });
            document.getElementById('nextToPayment').addEventListener('click', () => {
                console.log('Next to payment clicked');
                goToStep(3);
            });
            document.getElementById('backToSeats').addEventListener('click', () => {
                console.log('Back to seats clicked');
                goToStep(2);
            });
            document.getElementById('confirmPurchase').addEventListener('click', () => {
                console.log('Confirm purchase clicked');
                confirmPurchase();
            });
        }

        function handleSessionClick(event) {
            console.log('Session clicked:', event.currentTarget.dataset.sessionId);
            selectSession(event.currentTarget);
        }

        function updateLegendPrices() {
            console.log('Updating legend prices...');
            const economyPriceElement = document.getElementById('economyPrice');
            const regularPriceElement = document.getElementById('regularPrice');

            if (economyPriceElement && regularPriceElement) {
                economyPriceElement.textContent = `Эконом (${seatPrices.economy}₽)`;
                regularPriceElement.textContent = `Обычные (${seatPrices.regular}₽)`;
            } else {
                console.error('Legend price elements not found');
            }
        }

        function selectSession(sessionElement) {
            console.log('Selecting session:', sessionElement.dataset.sessionId);
            document.querySelectorAll('.session-option').forEach(opt => {
                opt.classList.remove('selected');
                console.log('Removed selected class from:', opt.dataset.sessionId);
            });
            
            sessionElement.classList.add('selected');
            console.log('Added selected class to:', sessionElement.dataset.sessionId);
            
            selectedSession = {
                id: sessionElement.dataset.sessionId,
                time: sessionElement.dataset.time,
                date: sessionElement.dataset.date,
                hall: sessionElement.dataset.hall,
                price: sessionElement.dataset.price,
                format: sessionElement.dataset.format
            };

            seatPrices = {
                economy: Math.floor(selectedSession.price * 0.8),
                regular: Math.floor(selectedSession.price)
            };
            console.log('Updated seat prices:', seatPrices);

            document.getElementById('nextToSeats').disabled = false;
            console.log('Next to seats button enabled');
            updateLegendPrices();
            updateSessionInfo();
        }

        function updateSessionInfo() {
            if (selectedSession) {
                const sessionInfo = `${selectedSession.date} в ${selectedSession.time}, Зал ${selectedSession.hall} (${selectedSession.format})`;
                document.getElementById('selectedSessionInfo').textContent = sessionInfo;
                console.log('Updated session info:', sessionInfo);
            }
        }

        async function fetchSeats() {
            if (!selectedSession) {
                console.error('No session selected');
                return;
            }
            
            console.log('Fetching seats for session:', selectedSession.id);
            try {
                const response = await fetch(`/ticket-purchase/seats/${selectedSession.id}`);
                const data = await response.json();
                
                if (!response.ok) {
                    throw new Error(data.error || 'Ошибка загрузки мест');
                }
                
                console.log('Seats fetched:', data.seats.length, 'Occupied:', data.occupiedSeats);
                generateSeats(data.seats, data.occupiedSeats);
            } catch (error) {
                console.error('Error fetching seats:', error.message);
                alert('Ошибка при загрузке мест: ' + error.message);
            }
        }

        function generateSeats(seats, occupiedSeats) {
            console.log('Generating seats...');
            const seatsGrid = document.getElementById('seatsGrid');
            seatsGrid.innerHTML = '';

            // Dynamic grid based on hall configuration (adjust as needed)
            seatsGrid.style.gridTemplateColumns = 'repeat(5, 1fr)';
            seatsGrid.style.gridTemplateRows = 'repeat(6, 1fr)';

            seats.forEach(seat => {
                const seatElement = document.createElement('div');
                const isOccupied = occupiedSeats.includes(seat.id);

                seatElement.className = `seat ${seat.seatType} ${isOccupied ? 'occupied' : ''}`;
                seatElement.textContent = seat.searNumber;
                seatElement.dataset.seatId = seat.id;
                seatElement.dataset.seatNumber = seat.searNumber;
                seatElement.dataset.seatType = seat.seatType;
                seatElement.dataset.row = seat.seatRow;
                seatElement.dataset.seatInRow = seat.searNumber;

                if (!isOccupied) {
                    seatElement.addEventListener('click', function() {
                        console.log('Seat clicked:', seat.id);
                        toggleSeat(this);
                    });
                }

                seatsGrid.appendChild(seatElement);
            });
            console.log('Seats generated');
        }

        function toggleSeat(seatElement) {
            console.log('Toggling seat:', seatElement.dataset.seatId);
            const seatId = seatElement.dataset.seatId;
            const seatType = seatElement.dataset.seatType;
            
            if (seatElement.classList.contains('selected')) {
                seatElement.classList.remove('selected');
                selectedSeats = selectedSeats.filter(seat => seat.id !== seatId);
                console.log('Deselected seat:', seatId);
            } else {
                seatElement.classList.add('selected');
                selectedSeats.push({
                    id: seatId,
                    number: seatElement.dataset.seatNumber,
                    type: seatType,
                    row: seatElement.dataset.row,
                    seatInRow: seatElement.dataset.seatInRow,
                    price: seatPrices[seatType]
                });
                console.log('Selected seat:', seatId);
            }

            updateSelectedSeats();
        }

        function updateSelectedSeats() {
            console.log('Updating selected seats...');
            const selectedSeatsList = document.getElementById('selectedSeatsList');
            const totalPriceElement = document.getElementById('totalPrice');
            const nextButton = document.getElementById('nextToPayment');

            if (selectedSeats.length === 0) {
                selectedSeatsList.innerHTML = 'Места не выбраны';
                totalPriceElement.textContent = '0 ₽';
                nextButton.disabled = true;
                console.log('No seats selected');
                return;
            }

            selectedSeatsList.innerHTML = '';
            let totalPrice = 0;

            selectedSeats.forEach(seat => {
                const seatItem = document.createElement('div');
                seatItem.className = 'selected-seat-item';
                seatItem.innerHTML = `
                    <span class="seat-info">Ряд ${seat.row}, Место ${seat.seatInRow} (${seat.type === 'economy' ? 'Эконом' : 'Обычное'})</span>
                    <span class="seat-price">${seat.price} ₽</span>
                `;
                selectedSeatsList.appendChild(seatItem);
                totalPrice += seat.price;
            });

            totalPriceElement.textContent = `${totalPrice} ₽`;
            nextButton.disabled = false;
            console.log('Selected seats updated, total price:', totalPrice);
        }

        function checkUserRole() {
            console.log('Checking user role:', userRole);
            if (!isUserAuthenticated || !userRole.includes('ROLE_GOER')) {
                console.log('User not authenticated or no ROLE_GOER');
                alert('Пожалуйста, войдите в аккаунт или зарегистрируйтесь для покупки билетов.');
                window.location.href = '{{ path('login') }}';
                return false;
            }
            console.log('User has ROLE_GOER');
            return true;
        }

        function goToStep(step) {
            console.log('Going to step:', step);
            document.querySelectorAll('.step-content').forEach(content => {
                content.classList.remove('active');
            });

            document.querySelector(`.step-content[data-step="${step}"]`).classList.add('active');

            document.querySelectorAll('.step').forEach(stepElement => {
                const stepNumber = parseInt(stepElement.dataset.step);
                stepElement.classList.remove('active', 'completed');
                
                if (stepNumber === step) {
                    stepElement.classList.add('active');
                } else if (stepNumber < step) {
                    stepElement.classList.add('completed');
                }
            });

            currentStep = step;

            if (step === 3) {
                console.log('Updating final summary');
                updateFinalSummary();
            }
        }

        function updateFinalSummary() {
            console.log('Updating final summary...');
            const finalSessionInfo = document.getElementById('finalSessionInfo');
            finalSessionInfo.innerHTML = `
                <div><strong>Дата и время:</strong> ${selectedSession.date} в ${selectedSession.time}</div>
                <div><strong>Зал:</strong> ${selectedSession.hall} (${selectedSession.format})</div>
            `;

            const finalTicketsList = document.getElementById('finalTicketsList');
            finalTicketsList.innerHTML = '';
            
            let totalPrice = 0;
            selectedSeats.forEach(seat => {
                const ticketItem = document.createElement('div');
                ticketItem.className = 'ticket-item';
                ticketItem.innerHTML = `
                    <span>Билет - Ряд ${seat.row}, Место ${seat.seatInRow} (${seat.type === 'economy' ? 'Эконом' : 'Обычное'})</span>
                    <span>${seat.price} ₽</span>
                `;
                finalTicketsList.appendChild(ticketItem);
                totalPrice += seat.price;
            });

            document.getElementById('finalTotalPrice').textContent = `${totalPrice} ₽`;
            console.log('Final summary updated, total price:', totalPrice);
        }

        async function confirmPurchase() {
            console.log('Confirming purchase...');
            if (!checkUserRole()) return;

            try {
                const response = await fetch('{{ path('ticket_purchase_confirm') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: JSON.stringify({
                        sessionId: selectedSession.id,
                        seatIds: selectedSeats.map(seat => seat.id)
                    })
                });

                const result = await response.json();
                
                if (!response.ok) {
                    throw new Error(result.error || 'Ошибка при покупке билетов');
                }

                selectedSeats = [];
                updateSelectedSeats();
                console.log('Purchase confirmed, going to step 4');
                goToStep(4);
            } catch (error) {
                console.error('Purchase error:', error.message);
                alert('Ошибка при покупке: ' + error.message);
            }
        }
    </script>
{% endblock %}